plugins
{
	id "de.set.ecj" version "1.4.1" apply false
}

group = "cc.squirreljme.modules"
description = "Modules which are a part of SquirrelJME."

// Every sub-project needs SquirrelJME specific pieces
subprojects
{
	apply plugin: "java-library"
	apply plugin: "checkstyle"
	apply plugin: "cc.squirreljme.plugin"
	apply plugin: "maven-publish"
	apply plugin: "signing"

	// This may be needed later if Java 8 support goes away, can use Eclipse
	// although things will be lost with this...
	//apply plugin: "de.set.ecj"

	// Configure the compiler
	java {
		// Java ME 8 is effectively Java 7
        compileJava.sourceCompatibility = JavaVersion.VERSION_1_7
		compileJava.targetCompatibility = JavaVersion.VERSION_1_7

		// All files are always in UTF-8 format
		compileJava.options.encoding = "utf-8"

		// Copy to tests
		compileTestJava.sourceCompatibility = compileJava.sourceCompatibility
		compileTestJava.targetCompatibility = compileJava.targetCompatibility
		compileTestJava.options.encoding = compileJava.options.encoding
		compileTestJava.options.verbose = compileJava.options.verbose

		// Copy to JavaDoc
		javadoc.options.source = "1.7"
		javadoc.options.tags = [ "squirreljme.property",
			"squirreljme.env",
			"squirreljme.error",
			"squirreljme.syscallparam",
			"squirreljme.syscallreturn" ]

		// Include sources and JavaDocs!
		withSourcesJar()
		withJavadocJar()
	}

	// What to publish?
	publishing {
		publications {
			mavenJava(MavenPublication) {
				pom {
					description = project.description
					url = "https://squirreljme.cc/"
					inceptionYear = "2016"

					licenses {
						license {
							name = "GNU General Public License v3"
							url = "https://www.gnu.org/licenses/gpl-3.0.txt"
						}
					}

					organization {
						name = "Stephanie Gawroriski"
						url = "https://www.linkedin.com/in/xerthesquirrel/"
					}

					developers {
						developer {
							id = "xerthesquirrel"
							name = "Stephanie Gawroriski"
							email = "xerthesquirrel@gmail.com"
						}
					}

					scm {
						connection = "scm:git:git://github.com/SquirrelJME/SquirrelJME.git"
						url = "https://squirrlejme.cc/"
					}

					issueManagement {
						system = "GitHub"
						url = "https://github.com/SquirrelJME/SquirrelJME/issues"
					}
				}

				// Where is this project?
				artifactId = project.name
				groupId = "cc.squirreljme.modules"

				// Build from Java code
				from components.java
			}
		}

		// Where does the stuff go?
		// https://central.sonatype.org/pages/gradle.html
		repositories {
			maven {
				credentials {
					username = project.properties["squirreljmeNexusUser"]
					password = project.properties["squirreljmeNexusPassword"]
				}

				// Currently release to just snapshots
				url "https://oss.sonatype.org/content/repositories/snapshots/"
			}
		}
	}

	// Needed to publish
	signing {
		useGpgCmd()

		sign publishing.publications.mavenJava
	}

	// Enable SquirrelJME Tests
	apply from: project.rootProject.findProject(":emulators:emulator-base").
		projectDir.toPath().resolve("enable-testing.gradle").toFile()
}

// Properties for every sub-project, except for cldc-compact as it is special
configure(subprojects
	- project(":modules:cldc-compact"))
{
	apply plugin: "java"

	// All projects use the base classpath
    java
    {
		// Only use SquirrelJME's boot classes, not the system SDK
		Project cldcCompactProject = project(":modules:cldc-compact")
		compileJava.options.bootstrapClasspath = project.objects.
			fileCollection().from(cldcCompactProject.buildDir.toPath().
			resolve("classes").resolve("java").resolve("main")).getAsFileTree()

		// Copy to JavaDoc
		javadoc.options.bootClasspath = compileJava.options.bootstrapClasspath
			.collect()
    }

	dependencies
	{
		// All projects depend on the Compact CLDC Library
		implementation project(":modules:cldc-compact")
		testImplementation project(":modules:cldc-compact")
	}
}
